defmodule JSONSuite do
  def test_suite do
    [
      {"n_array_1_true_without_comma.json", {:error, nil}},
      {"n_array_a_invalid_utf8.json", {:error, nil}},
      {"n_array_colon_instead_of_comma.json", {:error, nil}},
      {"n_array_comma_after_close.json", {:error, nil}},
      {"n_array_comma_and_number.json", {:error, nil}},
      {"n_array_double_comma.json", {:error, nil}},
      {"n_array_double_extra_comma.json", {:error, nil}},
      {"n_array_extra_close.json", {:error, nil}},
      {"n_array_extra_comma.json", {:error, nil}},
      {"n_array_incomplete.json", {:error, nil}},
      {"n_array_incomplete_invalid_value.json", {:error, nil}},
      {"n_array_inner_array_no_comma.json", {:error, nil}},
      {"n_array_invalid_utf8.json", {:error, nil}},
      {"n_array_items_separated_by_semicolon.json", {:error, nil}},
      {"n_array_just_comma.json", {:error, nil}},
      {"n_array_just_minus.json", {:error, nil}},
      {"n_array_missing_value.json", {:error, nil}},
      {"n_array_newlines_unclosed.json", {:error, nil}},
      {"n_array_number_and_comma.json", {:error, nil}},
      {"n_array_number_and_several_commas.json", {:error, nil}},
      {"n_array_spaces_vertical_tab_formfeed.json", {:error, nil}},
      {"n_array_star_inside.json", {:error, nil}},
      {"n_array_unclosed.json", {:error, nil}},
      {"n_array_unclosed_trailing_comma.json", {:error, nil}},
      {"n_array_unclosed_with_new_lines.json", {:error, nil}},
      {"n_array_unclosed_with_object_inside.json", {:error, nil}},
      {"n_incomplete_false.json", {:error, nil}},
      {"n_incomplete_null.json", {:error, nil}},
      {"n_incomplete_true.json", {:error, nil}},
      {"n_multidigit_number_then_00.json", {:error, nil}},
      {"n_number_++.json", {:error, nil}},
      {"n_number_+1.json", {:error, nil}},
      {"n_number_+Inf.json", {:error, nil}},
      {"n_number_-01.json", {:error, nil}},
      {"n_number_-1.0..json", {:error, nil}},
      {"n_number_-2..json", {:error, nil}},
      {"n_number_-NaN.json", {:error, nil}},
      {"n_number_.-1.json", {:error, nil}},
      {"n_number_.2e-3.json", {:error, nil}},
      {"n_number_0.1.2.json", {:error, nil}},
      {"n_number_0.3e+.json", {:error, nil}},
      {"n_number_0.3e.json", {:error, nil}},
      {"n_number_0.e1.json", {:error, nil}},
      {"n_number_0e+.json", {:error, nil}},
      {"n_number_0e.json", {:error, nil}},
      {"n_number_0_capital_E+.json", {:error, nil}},
      {"n_number_0_capital_E.json", {:error, nil}},
      {"n_number_1.0e+.json", {:error, nil}},
      {"n_number_1.0e-.json", {:error, nil}},
      {"n_number_1.0e.json", {:error, nil}},
      {"n_number_1eE2.json", {:error, nil}},
      {"n_number_1_000.json", {:error, nil}},
      {"n_number_2.e+3.json", {:error, nil}},
      {"n_number_2.e-3.json", {:error, nil}},
      {"n_number_2.e3.json", {:error, nil}},
      {"n_number_9.e+.json", {:error, nil}},
      {"n_number_expression.json", {:error, nil}},
      {"n_number_hex_1_digit.json", {:error, nil}},
      {"n_number_hex_2_digits.json", {:error, nil}},
      {"n_number_Inf.json", {:error, nil}},
      {"n_number_infinity.json", {:error, nil}},
      {"n_number_invalid+-.json", {:error, nil}},
      {"n_number_invalid-negative-real.json", {:error, nil}},
      {"n_number_invalid-utf-8-in-bigger-int.json", {:error, nil}},
      {"n_number_invalid-utf-8-in-exponent.json", {:error, nil}},
      {"n_number_invalid-utf-8-in-int.json", {:error, nil}},
      {"n_number_minus_infinity.json", {:error, nil}},
      {"n_number_minus_sign_with_trailing_garbage.json", {:error, nil}},
      {"n_number_minus_space_1.json", {:error, nil}},
      {"n_number_NaN.json", {:error, nil}},
      {"n_number_neg_int_starting_with_zero.json", {:error, nil}},
      {"n_number_neg_real_without_int_part.json", {:error, nil}},
      {"n_number_neg_with_garbage_at_end.json", {:error, nil}},
      {"n_number_real_garbage_after_e.json", {:error, nil}},
      {"n_number_real_without_fractional_part.json", {:error, nil}},
      {"n_number_real_with_invalid_utf8_after_e.json", {:error, nil}},
      {"n_number_starting_with_dot.json", {:error, nil}},
      {"n_number_U+FF11_fullwidth_digit_one.json", {:error, nil}},
      {"n_number_with_alpha.json", {:error, nil}},
      {"n_number_with_alpha_char.json", {:error, nil}},
      {"n_number_with_leading_zero.json", {:error, nil}},
      {"n_object_bad_value.json", {:error, nil}},
      {"n_object_bracket_key.json", {:error, nil}},
      {"n_object_comma_instead_of_colon.json", {:error, nil}},
      {"n_object_double_colon.json", {:error, nil}},
      {"n_object_emoji.json", {:error, nil}},
      {"n_object_garbage_at_end.json", {:error, nil}},
      {"n_object_key_with_single_quotes.json", {:error, nil}},
      {"n_object_missing_colon.json", {:error, nil}},
      {"n_object_missing_key.json", {:error, nil}},
      {"n_object_missing_semicolon.json", {:error, nil}},
      {"n_object_missing_value.json", {:error, nil}},
      {"n_object_no-colon.json", {:error, nil}},
      {"n_object_non_string_key.json", {:error, nil}},
      {"n_object_non_string_key_but_huge_number_instead.json", {:error, nil}},
      # {"n_object_pi_in_key_and_trailing_comma.json", {:error, nil}}, # not found
      {"n_object_repeated_null_null.json", {:error, nil}},
      {"n_object_several_trailing_commas.json", {:error, nil}},
      {"n_object_single_quote.json", {:error, nil}},
      {"n_object_trailing_comma.json", {:error, nil}},
      {"n_object_trailing_comment.json", {:error, nil}},
      {"n_object_trailing_comment_open.json", {:error, nil}},
      {"n_object_trailing_comment_slash_open.json", {:error, nil}},
      {"n_object_trailing_comment_slash_open_incomplete.json", {:error, nil}},
      {"n_object_two_commas_in_a_row.json", {:error, nil}},
      {"n_object_unquoted_key.json", {:error, nil}},
      {"n_object_unterminated-value.json", {:error, nil}},
      {"n_object_with_single_string.json", {:error, nil}},
      {"n_object_with_trailing_garbage.json", {:error, nil}},
      {"n_single_space.json", {:error, nil}},
      {"n_string_1_surrogate_then_escape.json", {:error, nil}},
      {"n_string_1_surrogate_then_escape_u.json", {:error, nil}},
      {"n_string_1_surrogate_then_escape_u1.json", {:error, nil}},
      {"n_string_1_surrogate_then_escape_u1x.json", {:error, nil}},
      {"n_string_accentuated_char_no_quotes.json", {:error, nil}},
      {"n_string_backslash_00.json", {:error, nil}},
      {"n_string_escaped_backslash_bad.json", {:error, nil}},
      {"n_string_escaped_ctrl_char_tab.json", {:error, nil}},
      {"n_string_escaped_emoji.json", {:error, nil}},
      {"n_string_escape_x.json", {:error, nil}},
      {"n_string_incomplete_escape.json", {:error, nil}},
      {"n_string_incomplete_escaped_character.json", {:error, nil}},
      {"n_string_incomplete_surrogate.json", {:error, nil}},
      {"n_string_incomplete_surrogate_escape_invalid.json", {:error, nil}},
      {"n_string_invalid-utf-8-in-escape.json", {:error, nil}},
      {"n_string_invalid_backslash_esc.json", {:error, nil}},
      {"n_string_invalid_unicode_escape.json", {:error, nil}},
      {"n_string_invalid_utf8_after_escape.json", {:error, nil}},
      {"n_string_leading_uescaped_thinspace.json", {:error, nil}},
      {"n_string_no_quotes_with_bad_escape.json", {:error, nil}},
      {"n_string_single_doublequote.json", {:error, nil}},
      {"n_string_single_quote.json", {:error, nil}},
      {"n_string_single_string_no_double_quotes.json", {:error, nil}},
      {"n_string_start_escape_unclosed.json", {:error, nil}},
      {"n_string_unescaped_crtl_char.json", {:error, nil}},
      {"n_string_unescaped_newline.json", {:error, nil}},
      {"n_string_unescaped_tab.json", {:error, nil}},
      {"n_string_unicode_CapitalU.json", {:error, nil}},
      {"n_string_with_trailing_garbage.json", {:error, nil}},
      {"n_structure_100000_opening_arrays.json", {:error, nil}},
      {"n_structure_angle_bracket_..json", {:error, nil}},
      {"n_structure_angle_bracket_null.json", {:error, nil}},
      {"n_structure_array_trailing_garbage.json", {:error, nil}},
      {"n_structure_array_with_extra_array_close.json", {:error, nil}},
      {"n_structure_array_with_unclosed_string.json", {:error, nil}},
      {"n_structure_ascii-unicode-identifier.json", {:error, nil}},
      {"n_structure_capitalized_True.json", {:error, nil}},
      {"n_structure_close_unopened_array.json", {:error, nil}},
      {"n_structure_comma_instead_of_closing_brace.json", {:error, nil}},
      {"n_structure_double_array.json", {:error, nil}},
      {"n_structure_end_array.json", {:error, nil}},
      {"n_structure_incomplete_UTF8_BOM.json", {:error, nil}},
      {"n_structure_lone-invalid-utf-8.json", {:error, nil}},
      {"n_structure_lone-open-bracket.json", {:error, nil}},
      {"n_structure_no_data.json", {:error, nil}},
      {"n_structure_null-byte-outside-string.json", {:error, nil}},
      {"n_structure_number_with_trailing_garbage.json", {:error, nil}},
      {"n_structure_object_followed_by_closing_object.json", {:error, nil}},
      {"n_structure_object_unclosed_no_value.json", {:error, nil}},
      {"n_structure_object_with_comment.json", {:error, nil}},
      {"n_structure_object_with_trailing_garbage.json", {:error, nil}},
      {"n_structure_open_array_apostrophe.json", {:error, nil}},
      {"n_structure_open_array_comma.json", {:error, nil}},
      {"n_structure_open_array_object.json", {:error, nil}},
      {"n_structure_open_array_open_object.json", {:error, nil}},
      {"n_structure_open_array_open_string.json", {:error, nil}},
      {"n_structure_open_array_string.json", {:error, nil}},
      {"n_structure_open_object.json", {:error, nil}},
      {"n_structure_open_object_close_array.json", {:error, nil}},
      {"n_structure_open_object_comma.json", {:error, nil}},
      {"n_structure_open_object_open_array.json", {:error, nil}},
      {"n_structure_open_object_open_string.json", {:error, nil}},
      {"n_structure_open_object_string_with_apostrophes.json", {:error, nil}},
      {"n_structure_open_open.json", {:error, nil}},
      {"n_structure_single_eacute.json", {:error, nil}},
      {"n_structure_single_star.json", {:error, nil}},
      {"n_structure_trailing_#.json", {:error, nil}},
      {"n_structure_U+2060_word_joined.json", {:error, nil}},
      {"n_structure_uescaped_LF_before_string.json", {:error, nil}},
      {"n_structure_unclosed_array.json", {:error, nil}},
      {"n_structure_unclosed_array_partial_null.json", {:error, nil}},
      {"n_structure_unclosed_array_unfinished_false.json", {:error, nil}},
      {"n_structure_unclosed_array_unfinished_true.json", {:error, nil}},
      {"n_structure_unclosed_object.json", {:error, nil}},
      {"n_structure_unicode-identifier.json", {:error, nil}},
      {"n_structure_UTF8_BOM_no_data.json", {:error, nil}},
      # {"n_structure_whitespace_formfeed.json", {:error, nil}},
      {"n_structure_whitespace_U+2060_word_joiner.json", {:error, nil}},
      {"y_array_arraysWithSpaces.json", {:ok, [[]]}},
      {"y_array_empty-string.json", {:ok, [""]}},
      {"y_array_empty.json", {:ok, []}},
      {"y_array_ending_with_newline.json", {:ok, ["a"]}},
      {"y_array_false.json", {:ok, [false]}},
      {"y_array_heterogeneous.json", {:ok, [nil, 1, "1", %{}]}},
      {"y_array_null.json", {:ok, [nil]}},
      {"y_array_with_1_and_newline.json", {:ok, [1]}},
      {"y_array_with_leading_space.json", {:ok, [1]}},
      {"y_array_with_several_null.json", {:ok, [1, nil, nil, nil, 2]}},
      {"y_array_with_trailing_space.json", {:ok, [2]}},
      {"y_number.json", {:ok, [1.23e67]}},
      {"y_number_0e+1.json", {:ok, [0]}},
      {"y_number_0e1.json",  {:ok, [0]}},
      {"y_number_after_space.json", {:ok, [4]}},
      {"y_number_double_close_to_zero.json", {:ok, [-1.0e-78]}},
      {"y_number_int_with_exp.json", {:ok, [200]}},
      {"y_number_minus_zero.json", {:ok, [-0]}},
      {"y_number_negative_int.json", {:ok, [-123]}},
      {"y_number_negative_one.json", {:ok, [-1]}},
      {"y_number_negative_zero.json", {:ok, [-0]}},
      {"y_number_real_capital_e.json", {:ok, [1.0e22]}},
      {"y_number_real_capital_e_neg_exp.json", {:ok, [1.0e-2]}},
      {"y_number_real_capital_e_pos_exp.json", {:ok, [100]}},
      {"y_number_real_exponent.json", {:ok, [1.23e47]}},
      {"y_number_real_fraction_exponent.json", {:ok, [1.23456e80]}},
      {"y_number_real_neg_exp.json", {:ok, [1.0e-2]}},
      {"y_number_real_pos_exponent.json", {:ok, [100]}},
      {"y_number_simple_int.json", {:ok, [123]}},
      {"y_number_simple_real.json", {:ok, [123.456789]}},
      {"y_object.json", {:ok, %{"asd" => "sdf", "dfg" => "fgh"}}},
      {"y_object_basic.json", {:ok, %{"asd" => "sdf"}}},
      {"y_object_duplicated_key.json", {:ok, %{"a" => "c"}}},
      {"y_object_duplicated_key_and_value.json", {:ok, %{"a" => "b"}}},
      {"y_object_empty.json", {:ok, %{}}},
      {"y_object_empty_key.json", {:ok, %{"" => 0}}},
      {"y_object_escaped_null_in_key.json", {:ok, %{"foo\u0000bar" => 42}}},
      {"y_object_extreme_numbers.json", {:ok, %{"min" => -1.0e28, "max" => 1.0e28}}},
      {"y_object_long_strings.json",
       {:ok,
        %{
          "x" => [%{"id" => "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"}],
          "id" => "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        }}},
      {"y_object_simple.json", {:ok, %{"a" => []}}},
      {"y_object_string_unicode.json", {:ok, %{"title" => "Полтора Землекопа"}}},
      {"y_object_with_newlines.json", {:ok, %{"a" => "b"}}},
      {"y_string_1_2_3_bytes_UTF-8_sequences.json", {:ok, ["`Īካ"]}},
      # {"y_string_accepted_surrogate_pair.json", {:ok, ["\uD801\udc37"]}},
      # {"y_string_accepted_surrogate_pairs.json", {:ok, ["\ud83d\ude39\ud83d\udc8d"]}},
      {"y_string_allowed_escapes.json", {:ok, ["\"\\/\b\f\n\r\t"]}},
      {"y_string_backslash_and_u_escaped_zero.json", {:ok, ["\\u0000"]}},
      {"y_string_backslash_doublequotes.json", {:ok, ["\""]}},
      {"y_string_comments.json", {:ok, ["a/*b*/c/*d//e"]}},
      {"y_string_double_escape_a.json", {:ok, ["\\a"]}},
      {"y_string_double_escape_n.json", {:ok, ["\\n"]}},
      {"y_string_escaped_control_character.json", {:ok, ["\u0012"]}},
      {"y_string_escaped_noncharacter.json", {:ok, ["\uFFFF"]}},
      {"y_string_in_array.json", {:ok, ["asd"]}},
      {"y_string_in_array_with_leading_space.json", {:ok, ["asd"]}},
      # {"y_string_last_surrogates_1_and_2.json", {:ok, ["\uDBFF\uDFFF"]}},
      {"y_string_nbsp_uescaped.json", {:ok, ["new\u00A0line"]}},
      # {"y_string_nonCharacterInUTF-8_U+10FFFF.json", {:ok, ["\u0010\uFFFF"]}},
      # {"y_string_nonCharacterInUTF-8_U+1FFFF.json", {:ok, ["\u1BFFF"]}}, # not found
      {"y_string_nonCharacterInUTF-8_U+FFFF.json", {:ok, ["\uFFFF"]}},
      {"y_string_null_escape.json", {:ok, ["\u0000"]}},
      {"y_string_one-byte-utf-8.json", {:ok, [","]}},
      {"y_string_pi.json", {:ok, ["π"]}},
      {"y_string_simple_ascii.json", {:ok, ["asd "]}},
      {"y_string_space.json", {:ok, " "}},
      # {"y_string_surrogates_U+1D11E_MUSICAL_SYMBOL_G_CLEF.json", {:ok, ["\uD834\uDd1e"]}},
      {"y_string_three-byte-utf-8.json", {:ok, ["\u0821"]}},
      {"y_string_two-byte-utf-8.json", {:ok, ["\u0123"]}},
      {"y_string_u+2028_line_sep.json", {:ok, ["\u2028"]}},
      {"y_string_u+2029_par_sep.json", {:ok, ["\u2029"]}},
      {"y_string_uEscape.json", {:ok, ["aクリス"]}},
      {"y_string_uescaped_newline.json", {:ok, ["new\nline"]}},
      {"y_string_unescaped_char_delete.json", {:ok, ["\d"]}},
      {"y_string_unicode.json", {:ok, ["\uA66D"]}},
      {"y_string_unicodeEscapedBackslash.json", {:ok, ["\\"]}},
      {"y_string_unicode_2.json", {:ok, ["⍂㈴⍂"]}},
      {"y_string_unicode_escaped_double_quote.json", {:ok, ["\""]}},
      # {"y_string_unicode_U+10FFFE_nonchar.json", {:ok, ["\uDBFF\uDFFE"]}},
      # {"y_string_unicode_U+1FFFE_nonchar.json", {:ok, ["\uD83F\uDFFE"]}},
      {"y_string_unicode_U+200B_ZERO_WIDTH_SPACE.json", {:ok, ["\u200B"]}},
      {"y_string_unicode_U+2064_invisible_plus.json", {:ok, ["\u2064"]}},
      {"y_string_unicode_U+FDD0_nonchar.json", {:ok, ["\uFDD0"]}},
      {"y_string_unicode_U+FFFE_nonchar.json", {:ok, ["\uFFFE"]}},
      {"y_string_utf8.json", {:ok, ["€𝄞"]}},
      {"y_string_with_del_character.json", {:ok, ["a\da"]}},
      {"y_structure_lonely_false.json", {:ok, false}},
      {"y_structure_lonely_int.json", {:ok, 42}},
      {"y_structure_lonely_negative_real.json", {:ok, -0.1}},
      {"y_structure_lonely_null.json", {:ok, nil}},
      {"y_structure_lonely_string.json", {:ok, "asd"}},
      {"y_structure_lonely_true.json", {:ok, true}},
      {"y_structure_string_empty.json", {:ok, ""}},
      {"y_structure_trailing_newline.json", {:ok, ["a"]}},
      {"y_structure_true_in_array.json", {:ok, [true]}},
      {"y_structure_whitespace_array.json", {:ok, []}}
    ]
  end
end

defmodule JSONSpec do
  use ESpec

  alias ThankYouStars.JSON, as: JSON
  alias ThankYouStars.Result, as: Result

  describe "JSON.decode" do
    Enum.map(JSONSuite.test_suite(), fn {path, result} ->
      context path do
        let(:json, do: File.read!("test/fixture/test_parsing/#{unquote(path)}"))

        it(
          do:
            Result.map_error(JSON.decode(json()), fn _ -> nil end)
            |> to(eq(unquote(Macro.escape(result))))
        )
      end
    end)
  end
end
